git知识点:
$ git checkout -b dev
Switched to a new branch 'dev

git checkout命令加上-b参数表示创建并切换, checkout则仅仅表示切换分支

git branch查看当前分支
然后,就可以在dev分支上正常提交
如果分支上面的工作完成, 则切回master分支, 把分支上面的工作合并到master分支上
git merge (分支名)
合并完成后，就可以放心地删除dev分支了：
$ git branch -d (分支名)

小结:
查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>

git推送本地分支到远程分支:
1 一种是在远程开好分支,本地直接拉下来 : git checkout -b feature-branch origin/feature-branch    //检出远程的feature-branch分支到本地
2 本地先开好分支然后推送到远程 :
$  git checkout -b feature-branch    //创建并切换到分支feature-branch
$  git push origin feature-branch:feature-branch    //推送本地的feature-branch(冒号前面的)分支到远程origin的feature-branch(冒号后面的)分支(没有会自动创建)


redux知识点补充:
redux设计原则:
1 store必须唯一
2 只有store能够改变自己的内容: 不要误认为是reducer改变自己的内容,它只是拿到之前的数据,生成新的数据返回给了store,store拿到数据
自己对自己进行了更新
3 reducer必须是纯函数: 纯函数指的是给定固定的输入,就一定会有固定的输出,而且不会有任何副作用,一旦一个函数中有setTimeout或者ajax请求,或者new Data()这种就不是纯函数了
切记:不要对传进去的参数进行修改
redux核心API:
createStore: 帮助我们创建一个store
store.dispatch: 派发action,传递给store
store.getState: 会帮我们获取store所有的数据内容
store.subscribe: 会订阅store的改变,store一旦改变,回调函数会被执行